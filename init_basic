#!/usr/bin/env bash

#### INITS ####

# https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
get_script_dir() {
    local SOURCE_PATH="${BASH_SOURCE[0]}"
    local SYMLINK_DIR
    local SCRIPT_DIR
    # Resolve symlinks recursively
    while [ -L "$SOURCE_PATH" ]; do
        # Get symlink directory
        SYMLINK_DIR="$(cd -P "$(dirname "$SOURCE_PATH")" >/dev/null 2>&1 && pwd)"
        # Resolve symlink target (relative or absolute)
        SOURCE_PATH="$(readlink "$SOURCE_PATH")"
        # Check if candidate path is relative or absolute
        if [[ $SOURCE_PATH != /* ]]; then
            # Candidate path is relative, resolve to full path
            SOURCE_PATH=$SYMLINK_DIR/$SOURCE_PATH
        fi
    done
    # Get final script directory path from fully resolved source path
    SCRIPT_DIR="$(cd -P "$(dirname "$SOURCE_PATH")" >/dev/null 2>&1 && pwd)"
    echo "$SCRIPT_DIR"
}

export u=$([ -n "$1" ] && echo "$1" || echo "$USER")
export pacman_args=(-S --needed --disable-download-timeout --noconfirm)
export DISTRO_ID=$([ -d "/data/data/com.termux" ] && echo "termux" ||
    echo $(source /etc/os-release && echo $ID))

if [ "$EUID" -ne 0 ]; then
    # you will need to discard all changes with git if you want to use all of the repo components
    dir_path="$(get_script_dir)"

    echo "dir path: $dir_path"

    stow --no-folding --adopt -v -t $HOME -d "$dir_path" .

    sudo "$0" "$u" "$@"
    exit $?
fi

if [ -f ../.bashrc ]; then
    if [ -f ../.bashrc.bak ]; then rm -f ../bashrc.bak; fi

    mv ../.bashrc ../.bashrc.bak
fi

read -p "Reminder: dont run manually with sudo as it will cause unexpected behavior, 
Are you sure want to continue? [y/N]: " cont

if [[ $cont != "y" ]]; then
    echo 'operation aborted'
    exit 1
fi

if [ -z "$CUSTOM_BIN" ]; then
    export CUSTOM_BIN=/home/$u/.local/bin
fi

mkdir -p $CUSTOM_BIN

set -euo pipefail

make_zsh_default() {
    chsh -s $(which zsh) $u
}

# this makes GTK apps listen to portal settings, like using Dolphin for filepicker,
# using KDE font settings, etc.
use_portal() {
    if ! grep GTK_USE_PORTAL /etc/environment &>/dev/null; then
        bash -c 'echo GTK_USE_PORTAL=1 >> /etc/environment'
    fi
}

# GTK has rendering problem in low-end computers as it uses Vulkan now
opengl_fallback() {
    if ! grep GSK_RENDERER /etc/environment; then
        read -p "Do you want to use OpenGL for rendering GTK apps? (RECOMMENDED)
        You can always turn it off by deleting GSK_RENDERER=gl in /etc/environment.
        Answer (y/N): " glopt

        if [[ $glopt == y ]]; then
            bash -c 'echo GSK_RENDERER=gl >> /etc/environment'
        fi
    fi
}

arch_primary_install() {
    pacman -Syy --noconfirm --needed --disable-download-timeout ufw reflector \
        inotify-tools stow btop ntfs-3g wl-clipboard rsync less man-db udftools \
        exfatprogs dosfstools f2fs-tools vim zoxide unzip zsh tmux fzf lf system-config-printer \
        fastfetch vnstat nethogs cryfs fwupd kio-admin ttf-ms-fonts power-profiles-daemon \
        pacman-contrib print-manager cups fd ripgrep eza trash-cli python-shtab lazygit \
        bat git-delta sad powertop

    # gui for basic use. disk partitioning is much nicer in gui, other things covered by the terminal
    pacman ${pacman_args[*]} gnome-disk-utility gwenview okular \
        mpv kalk kamoso krecorder spectacle kimageformats libreoffice-fresh \
        ffmpegthumbs kdeconnect kolourpaint filelight

    if df --output=fstype / | grep btrfs; then
        # I tested this when using systemd-boot, so...
        if [[ "$(cat /proc/1/comm)" != 'systemd' ]]; then
            pacman ${pacman_args[*]} grub-btrfs
            systemctl enable --now grub-btrfsd

            sed -i 's/^ExecStart.*/ExecStart=\/usr\/bin\/grub-btrfsd --syslog -t/' \
                "/etc/systemd/system/grub-btrfsd.service"
        fi
        pacman ${pacman_args[*]} btrfs-assistant
    fi

    # for kde connect
    ufw allow 1716:1764/udp
    ufw allow 1716:1764/tcp

    use_portal

    systemctl enable --now ufw vnstat paccache.timer cups.socket
    ufw default deny
}

arch_add_reflector() {
    # bash -c 'echo "--country SG" >> /etc/xdg/reflector/reflector.conf'
    sed -i 's/^--latest.*/--latest 10/' "/etc/xdg/reflector/reflector.conf"
    systemctl enable --now reflector.service reflector.timer
}

arch_add_chaotic_aur() {
    if ! pacman-key --list-keys | grep 3056513887B78AEB; then
        pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
        pacman-key --lsign-key 3056513887B78AEB
    fi

    pacman -U --noconfirm --needed 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
    pacman -U --noconfirm --needed 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    if ! grep '/etc/pacman.d/chaotic-mirrorlist' /etc/pacman.conf; then
        bash -c "printf '[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist' >> /etc/pacman.conf"
    fi
    pacman -Sy --noconfirm --needed --disable-download-timeout paru octopi

    if ! sudo --user=$u paru -S soar-bin --needed; then echo 'error installing software with paru'; fi
}

# lf and fzf might be available in you package managers, but usually they are out of date
amd64_install() {
    #lf
    wget -O - https://github.com/gokcehan/lf/releases/latest/download/lf-linux-amd64.tar.gz | tar -xz -C $CUSTOM_BIN

    # fzf
    curl https://api.github.com/repos/junegunn/fzf/releases/latest | jq -r '.assets[3] | .browser_download_url' | xargs wget -O - | tar -xz -C $CUSTOM_BIN

    # this one is the official install script for fzf
    # git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    # ~/.fzf/install
}

#### MAIN ####

echo "initializing basic components..."

opengl_fallback

case "$DISTRO_ID" in
termux)
    pkg install vim stow unzip grep fzf lf
    ;;

arch)
    arch_add_chaotic_aur
    arch_primary_install
    arch_add_reflector
    ;;

cachyos)
    arch_add_chaotic_aur
    arch_primary_install
    arch_add_reflector
    ;;

fedora)
    dnf install -y vim zoxide btop wl-clipboard zsh fastfetch vnstat nethogs gnome-disk-utility \
        mpv trash-cli python3-shtab

    systemctl enable --now vnstat

    make_zsh_default
    amd64_install
    ;;

debian)
    sudo apt install zoxide fzf lf
    ;;

ubuntu)
    apt install stow vim zoxide
    amd64_install
    ;;

linuxmint)
    apt update

    apt install stow vim zoxide btop zsh tmux nethogs vnstat

    amd64_install
    ;;

alpine)
    echo "note: uncomment the community package in /etc/apk/repositories first"
    apk add vim bash bash-completion shadow ufw btop lf ncurses tmux stow curl zoxide \
        fzf fzf-tmux

    ufw default deny

    echo "remember to allow ports you need such as for ssh"

    ;;
esac

# source ~/.bashrc

echo "all basic components are successfully installed"
