#!/usr/bin/env bash

export u=$([ -n "$1" ] && echo "$1" || echo "$USER")

# NOTE: I tested this thing and the script should not run twice anymore.
# But if it still do then this is the culprit
if [ "$EUID" -ne 0 ]; then
    stow . --no-folding

    sudo "$0" "$u" "$@"
    exit $?
fi

if [ -f ../.bashrc ]; then
    if [ -f ../.bashrc.bak ]; then rm -f ../bashrc.bak; fi

    mv ../.bashrc ../.bashrc.bak
fi

echo "Reminder: dont run manually with sudo as it will cause unexpected behavior, 
and this script prompt you for your password already."

DISTRO_ID=

if [ -z "$CUSTOM_BIN" ]; then
    export CUSTOM_BIN=/home/$u/.local/bin
fi

set -euo pipefail

mkdir -p $CUSTOM_BIN

echo "initializing basic components..."

# lf and fzf might be available in you package managers, but usually they are out of date
amd64_install() {
    #lf
    wget -O - https://github.com/gokcehan/lf/releases/latest/download/lf-linux-amd64.tar.gz | tar -xz -C $CUSTOM_BIN

    # fzf
    curl https://api.github.com/repos/junegunn/fzf/releases/latest | jq -r '.assets[3] | .browser_download_url' | xargs wget -O - | tar -xz -C $CUSTOM_BIN

    # this one is the official install script for fzf
    # git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    # ~/.fzf/install
}

export DISTRO_ID=$([ -d "/data/data/com.termux" ] && echo "termux" ||
    echo $(grep '^ID' /etc/os-release | cut -d '=' -f2))

case "$DISTRO_ID" in
termux)
    pkg install vim stow unzip grep fzf lf
    ;;
arch)
    # basic requirement is that you've already installed git (and flatpak, if you want to
    # install GUI softwares) beforehand
    pacman -S --noconfirm --needed ufw reflector grub-btrfs inotify-tools
    systemctl enable --now ufw grub-btrfsd 

    bash -c 'echo "--country SG" >> /etc/xdg/reflector/reflector.conf'
    sed -i 's/^--latest.*/--latest 10/' "/etc/xdg/reflector/reflector.conf"
    systemctl enable --now reflector.service reflector.timer

    pacman -S --noconfirm --needed stow btop ntfs-3g wl-clipboard rsync less man-db udftools exfatprogs dosfstools f2fs-tools vim zoxide unzip zsh tmux fzf lf system-config-printer fastfetch vnstat nethogs

    # gui for basic use. disk partitioning is much nicer in gui, other things covered by the terminal
    pacman -S --noconfirm --needed gnome-disk-utility gwenview okular mpv

    systemctl enable --now vnstat
    chsh -s $(which zsh) $u

    # more convenient to update, indeed
    pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
    pacman-key --lsign-key 3056513887B78AEB
    pacman -U --noconfirm --needed 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
    pacman -U --noconfirm --needed 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'

    bash -c "printf '[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist' >> /etc/pacman.conf"
    pacman -S --noconfirm --needed paru octopi

    # daily update the repo so octopi is properly functional

    serviceaddr=/lib/systemd/system/pacman-daily-update

    bash -c "echo '[Unit]
Description=Run pacman-daily-update.service daily

[Timer]
OnCalendar=daily
Persistent=true
AccuracySec=1h

[Install]
WantedBy=timers.target' > $serviceaddr.timer"

    bash -c "echo '[Unit]
Description=Update Pacman repository database daily
After=network-online.target nss-lookup.target graphical-session.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/bin/pacman -Sy
Nice=19
StandardOutput=null
StandardError=journal
Restart=on-failure
RestartSec=10s
StartLimitIntervalSec=2h
StartLimitBurst=10

[Install]
WantedBy=multi-user.target
' > $serviceaddr.service"

    systemctl enable --now $serviceaddr.timer

    ;;

fedora)
    dnf install -y vim zoxide btop wl-clipboard zsh fastfetch vnstat nethogs gnome-disk-utility mpv trash-cli

    systemctl enable --now vnstat
    chsh -s $(which zsh) $u

    amd64_install
    ;;

ubuntu)
    apt install stow vim zoxide
    amd64_install

    ;;

linuxmint)
    apt update

    apt install stow vim zoxide btop zsh tmux nethogs vnstat

    amd64_install
    ;;
esac

# source ~/.bashrc

echo "all basic components are successfully installed"
